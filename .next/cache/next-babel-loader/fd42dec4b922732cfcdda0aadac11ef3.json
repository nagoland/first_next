{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nvar initial = {\n  message: \"START\",\n  data: [],\n  number: [],\n  result: 0\n};\n\nfunction calcReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ENTER\":\n      var data2 = state.data.slice();\n      var s = action.value;\n      data2.unshift(s);\n      var num = s.replace(/[^0-9]/g, \"\");\n      var number2 = state.number.slice();\n      number2.unshift(num);\n      var result = state.result * 1 + num * 1;\n      return {\n        message: \"ENTER\",\n        data: data2,\n        number: number2,\n        result: result\n      };\n\n    case \"RESET\":\n      return {\n        message: \"RESET\",\n        data: [],\n        number: [],\n        result: 0\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function initStore() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  return createStore(calcReducer, state, applyMiddleware(thunkMiddleware));\n} // function counterReducer (state = initial, action) {\n//     switch(action.type) {\n//         case \"INCREMENT\":\n//             return {\n//                 message: \"INCREMENT\",\n//                 count: state.count + 1\n//             }\n//         case \"DECREMENT\":\n//             return {\n//                 message: \"DECREMENT\",\n//                 count: state.count - 1\n//             }\n//         case \"RESET\":\n//             return {\n//                 message: \"RESET\",\n//                 count: initial.count\n//             }\n//         default:\n//             return state\n//     }\n// }\n// export function initStore(state = initial) {\n//     return createStore(counterReducer, state,\n//         applyMiddleware(thunkMiddleware))\n// }","map":{"version":3,"sources":["/Users/nagoyawataru/Desktop/next/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","initial","message","data","number","result","calcReducer","state","action","type","data2","slice","s","value","unshift","num","replace","number2","initStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,IAAMC,OAAO,GAAG;AACZC,EAAAA,OAAO,EAAE,OADG;AAEZC,EAAAA,IAAI,EAAE,EAFM;AAGZC,EAAAA,MAAM,EAAE,EAHI;AAIZC,EAAAA,MAAM,EAAE;AAJI,CAAhB;;AAMA,SAASC,WAAT,GAA8C;AAAA,MAAzBC,KAAyB,uEAAjBN,OAAiB;AAAA,MAARO,MAAQ;;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,OAAL;AACI,UAAIC,KAAK,GAAGH,KAAK,CAACJ,IAAN,CAAWQ,KAAX,EAAZ;AACA,UAAIC,CAAC,GAAGJ,MAAM,CAACK,KAAf;AACAH,MAAAA,KAAK,CAACI,OAAN,CAAcF,CAAd;AACA,UAAIG,GAAG,GAAGH,CAAC,CAACI,OAAF,CAAU,SAAV,EAAoB,EAApB,CAAV;AACA,UAAIC,OAAO,GAAGV,KAAK,CAACH,MAAN,CAAaO,KAAb,EAAd;AACAM,MAAAA,OAAO,CAACH,OAAR,CAAgBC,GAAhB;AACA,UAAIV,MAAM,GAAIE,KAAK,CAACF,MAAN,GAAe,CAAhB,GAAsBU,GAAG,GAAG,CAAzC;AACA,aAAO;AACHb,QAAAA,OAAO,EAAE,OADN;AAEHC,QAAAA,IAAI,EAAEO,KAFH;AAGHN,QAAAA,MAAM,EAAEa,OAHL;AAIHZ,QAAAA,MAAM,EAAEA;AAJL,OAAP;;AAOJ,SAAK,OAAL;AACI,aAAO;AACHH,QAAAA,OAAO,EAAE,OADN;AAEHC,QAAAA,IAAI,EAAE,EAFH;AAGHC,QAAAA,MAAM,EAAE,EAHL;AAIHC,QAAAA,MAAM,EAAE;AAJL,OAAP;;AAOA;AACI,aAAOE,KAAP;AAzBZ;AA2BH;;AAED,OAAO,SAASW,SAAT,GAAoC;AAAA,MAAjBX,KAAiB,uEAATN,OAAS;AACvC,SAAOH,WAAW,CAACQ,WAAD,EAAcC,KAAd,EACdR,eAAe,CAACC,eAAD,CADD,CAAlB;AAEH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware } from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\n\nconst initial = {\n    message: \"START\",\n    data: [],\n    number: [],\n    result: 0\n}\nfunction calcReducer(state = initial, action) {\n    switch(action.type) {\n        case \"ENTER\":\n            let data2 = state.data.slice()\n            let s = action.value \n            data2.unshift(s)\n            let num = s.replace(/[^0-9]/g,\"\")\n            let number2 = state.number.slice()\n            number2.unshift(num)\n            let result = (state.result * 1) + (num * 1)\n            return {\n                message: \"ENTER\",\n                data: data2,\n                number: number2,\n                result: result\n            }\n\n        case \"RESET\":\n            return {\n                message: \"RESET\",\n                data: [],\n                number: [],\n                result: 0\n            }\n\n            default:\n                return state\n    }\n}\n\nexport function initStore(state = initial) {\n    return createStore(calcReducer, state,\n        applyMiddleware(thunkMiddleware))\n}\n// function counterReducer (state = initial, action) {\n//     switch(action.type) {\n//         case \"INCREMENT\":\n//             return {\n//                 message: \"INCREMENT\",\n//                 count: state.count + 1\n//             }\n//         case \"DECREMENT\":\n//             return {\n//                 message: \"DECREMENT\",\n//                 count: state.count - 1\n//             }\n//         case \"RESET\":\n//             return {\n//                 message: \"RESET\",\n//                 count: initial.count\n//             }\n//         default:\n//             return state\n//     }\n// }\n\n// export function initStore(state = initial) {\n//     return createStore(counterReducer, state,\n//         applyMiddleware(thunkMiddleware))\n// }"]},"metadata":{},"sourceType":"module"}